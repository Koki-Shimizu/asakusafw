==================
演算子リファレンス
==================

この文書では、Asakusa Frameworkが提供する演算子について個々に紹介します。

Asakusa DSLの演算子
===================
Asakusa FrameworkのOperator DSLとFlow DSLでは、それぞれ演算子を利用しています。

前者のOperator DSLでは、主に演算子を「作成」します。
Asakusa Frameworkが提供するのは演算子の「種類」であって、
それぞれの演算子の細かな挙動はOperator DSLでカスタマイズできます。

後者のFlow DSLでは、主に演算子を「複合」します。
Operator DSLで作成する演算子はデータフローの「部品」であり、
これらを複合して複雑なデータフローを構築することになります。

レコードとグループ
------------------
それぞれの演算子が処理するデータの単位は、「レコード」または「グループ」のいずれかです。

レコード
    データフローに流れるデータ1つ分。
    Asakusa DSLでは「データモデルオブジェクト」として表現される。

グループ
    レコードを特定のキーでグループ化したもの。
    Asakusa DSLでは、データモデルオブジェクトのリストや反復子などで表現される。

なお、Operator DSLでは上記のグループを作成するために、 ``Key`` [#]_ という注釈を多用します。
これは、グループ化のための方法や、グループ内での整列順序を指定するためのものです。

..  [#] ``com.asakusafw.vocabulary.model.Key``

演算子の分類
------------
それぞれの演算子は、処理の内容ごとにいくつかに分類できます。

`フロー制御演算子`_
    データの流れそのものを制御する。

`データ操作演算子`_
    データフローに流れるデータを加工する。

`結合演算子`_
    複数のレコードを結合する。

`集計演算子`_
    レコードをグループごとに集計する。

`特殊演算子`_
    上記の分類に含まれない特別な演算子。

コア演算子とユーザー演算子
--------------------------
演算子を実装方法の面から2種類に分類できます。

コア演算子
    Asakusa Frameworkが **APIとして** 提供する演算子。
    この種類の演算子はOperator DSLで記述する必要はなく、Flow DSLから直接利用できる。

ユーザー演算子
    演算子の種類ごとに演算子注釈のみを提供している演算子。
    この種類の演算子を利用するには、Operator DSLで必要な演算子メソッドを定義する必要がある。
    なお、ユーザー演算子にもメソッド本体の実装が必要なものと不要なものに分かれています。

Flow DSLでコア演算子を利用する場合、
一般的に ``CoreOperatorFactory`` [#]_ というファクトリクラスが提供するメソッドを使用します。

..  [#] ``com.asakusafw.vocabulary.flow.util.CoreOperatorFactory``

演算子の性能特性
----------------
いくつかの演算子は、Map Reduceプログラムに変換する際に
「Reduceの先頭に強制的に配置される」という特性を持っています (Reduce系演算子)。
このようなReduce系演算子を多用した場合、
生成されるアプリケーションのMap Reduceの段数が増えるため、
性能に多大な影響を及ぼす場合があります。

複数のレコードや、グループを入力に取る演算子は、基本的にReduce系の演算子です。
そうでなく、単一のレコードを入力に取る演算子は、Map Reduceアプリケーションの
任意の位置に配置され、Reduce系演算子に比べて性能与える影響が小さくなります (Map系演算子)。

なお、Reduce系演算子の中には、コンパイラの最適化によって
Map系の演算子に変換される場合もあります。


演算子の表記
------------
この文書での演算子に関する表記を説明します。

コア演算子の表記
~~~~~~~~~~~~~~~~
コア演算子は次のような表で表記します。

..  list-table:: コア演算子の表記
    :widths: 4 20
    :header-rows: 1

    * - 項目
      - 内容
    * - 分類
      - "コア"
    * - 導入
      - この演算子が導入されたフレームワークのバージョン
    * - メソッド
      - ``CoreOperatorFactory`` 内のメソッド名
    * - 性能特性
      - "Map" または "Reduce"
    * - 入力数
      - この演算子への入力数
    * - 出力数
      - この演算子からの出力数

ユーザー演算子の表記
~~~~~~~~~~~~~~~~~~~~
ユーザー演算子は次のような表で表記します。

..  list-table:: ユーザー演算子の表記
    :widths: 4 20
    :header-rows: 1

    * - 項目
      - 内容
    * - 分類
      - "ユーザー"
    * - 導入
      - この演算子が導入されたフレームワークのバージョン
    * - 演算子注釈
      - 演算子注釈の名前
    * - 本体の実装
      - "必要"または"不要" [#]_
    * - 性能特性
      - "Map" または "Reduce"
    * - 入力数
      - この演算子への入力数
    * - 出力数
      - この演算子からの出力数
    * - 値引数
      - この演算子に値引数を指定可能かどうか
    * - 型引数
      - この演算子に型引数を指定可能かどうか [#]_

..  [#] 本体の実装が不要なユーザー演算子は、抽象メソッドとして宣言します
..  [#] :doc:`generic-dataflow_ja` を参照

入出力の表記
~~~~~~~~~~~~
それぞれの入出力は、次のような項目を表記します。

..  list-table:: 入出力の表記
    :widths: 4 20
    :header-rows: 1

    * - 項目
      - 内容
    * - 分類
      - "入力" または "出力"
    * - 名前
      - 標準的な名前
    * - 単位
      - 処理単位 ("レコード", "グループ")
    * - 型
      - データの種類
    * - 備考
      - 備考欄

フロー制御演算子
================
フロー制御系の演算子は、主にデータフローの構造を制御するための演算子です。

分岐演算子
----------
レコードを入力にとって、レコードの内容に応じてそれぞれの出力にレコードを振り分ける演算子です。
「条件に応じて出力先を変える」などの用途に利用できます。

..  list-table:: 分岐演算子の概要
    :widths: 4 6
    :header-rows: 1

    * - 項目
      - 説明
    * - 分類
      - ユーザー
    * - 導入
      - 0.1
    * - 演算子注釈
      - ``Branch``
    * - 本体の実装
      - 必要
    * - 性能特性
      - Map
    * - 入力数
      - 1
    * - 出力数
      - 任意
    * - 値引数
      - 指定可能
    * - 型引数
      - 指定可能

..  list-table:: 分岐演算子の入出力
    :widths: 2 2 2 2 8
    :header-rows: 1

    * - 分類
      - 名前
      - 単位
      - 型
      - 備考
    * - 入力
      - in
      - レコード
      - 任意
      - 
    * - 出力
      - (任意)
      - レコード
      - inと同様
      - 任意の個数を指定可

合流演算子
----------
複数の入力を合流して、単一の出力にまとめる演算子です。
`分岐演算子`_ の逆の動作を行い、SQLの ``UNION`` のように動きます。

..  list-table:: 合流演算子の概要
    :widths: 4 6
    :header-rows: 1

    * - 項目
      - 説明
    * - 分類
      - コア
    * - 導入
      - 0.1
    * - メソッド
      - ``confluent``
    * - 性能特性
      - Map
    * - 入力数
      - 任意
    * - 出力数
      - 1

..  list-table:: 合流演算子の入出力
    :widths: 2 2 2 2 8
    :header-rows: 1

    * - 分類
      - 名前
      - 単位
      - 型
      - 備考
    * - 入力
      - (任意)
      - レコード
      - 任意
      - 任意の入力数だが、全て同じ型
    * - 出力
      - out
      - レコード
      - 入力と同様
      - 

複製演算子
----------
レコードを入力にとって、同じ内容のレコードを複数の出力にそれぞれ出力する演算子です。

..  list-table:: 複製演算子の概要
    :widths: 4 6
    :header-rows: 1

    * - 項目
      - 説明
    * - 分類
      - コア
    * - 導入
      - 0.1
    * - メソッド
      - 特殊 [#]_
    * - 性能特性
      - Map
    * - 入力数
      - 1
    * - 出力数
      - 任意

..  list-table:: 複製演算子の入出力
    :widths: 2 2 2 2 8
    :header-rows: 1

    * - 分類
      - 名前
      - 単位
      - 型
      - 備考
    * - 入力
      - in
      - レコード
      - 任意
      - 
    * - 出力
      - (任意)
      - レコード
      - inと同様
      - 任意の個数

..  [#] データの複製は同一の出力を何度も利用するだけで実現できるため、特別なメソッドを用意していません

データ操作演算子
================
データ操作系の演算子は、主にレコードを加工したり変形したりするための演算子です。

更新演算子
----------
レコードの内容を更新する演算子です。
レコードの型そのものを変更したい場合には、 `変換演算子`_ を利用します。

..  list-table:: 更新演算子の概要
    :widths: 4 6
    :header-rows: 1

    * - 項目
      - 説明
    * - 分類
      - ユーザー
    * - 導入
      - 0.1
    * - 演算子注釈
      - ``Update``
    * - 本体の実装
      - 必要
    * - 性能特性
      - Map
    * - 入力数
      - 1
    * - 出力数
      - 1
    * - 値引数
      - 指定可能
    * - 型引数
      - 指定可能

..  list-table:: 更新演算子の入出力
    :widths: 2 2 2 2 8
    :header-rows: 1

    * - 分類
      - 名前
      - 単位
      - 型
      - 備考
    * - 入力
      - in
      - レコード
      - 任意
      - 
    * - 出力
      - out
      - レコード
      - inと同様
      - 

変換演算子
----------
レコードを別の型のレコードに変換する演算子です。
主に「レコードから別のレコードを作成する」という目的で利用します。

..  list-table:: 変換演算子の概要
    :widths: 4 6
    :header-rows: 1

    * - 項目
      - 説明
    * - 分類
      - ユーザー
    * - 導入
      - 0.1
    * - 演算子注釈
      - ``Branch``
    * - 本体の実装
      - 必要
    * - 性能特性
      - Map
    * - 入力数
      - 1
    * - 出力数
      - 2
    * - 値引数
      - 指定可能
    * - 型引数
      - 指定可能

..  list-table:: 変換演算子の入出力
    :widths: 2 2 2 2 8
    :header-rows: 1

    * - 分類
      - 名前
      - 単位
      - 型
      - 備考
    * - 入力
      - in
      - レコード
      - 任意
      - 
    * - 出力
      - converted
      - レコード
      - 任意
      - 変換後のデータ
    * - 出力
      - original
      - レコード
      - inと同様
      - 変換前のデータ

..  note::
    0.1.xではレコードから不要なプロパティを除去したり、
    新たなプロパティを追加する際にもこの変換演算子を利用していました。
    0.2.0以降、そのような単純な用途では `射影演算子`_ や `拡張演算子`_ の利用を推奨しています。

拡張演算子
----------
レコードに新たなプロパティを追加した別の型に変換する演算子です。
計算のために一時的にプロパティを追加したい場合などに利用することを想定しています。

..  list-table:: 拡張演算子の概要
    :widths: 4 6
    :header-rows: 1

    * - 項目
      - 説明
    * - 分類
      - コア
    * - 導入
      - 0.2
    * - メソッド
      - ``extend``
    * - 性能特性
      - Map
    * - 入力数
      - 1
    * - 出力数
      - 1

..  list-table:: 拡張演算子の入出力
    :widths: 2 2 2 2 8
    :header-rows: 1

    * - 分類
      - 名前
      - 単位
      - 型
      - 備考
    * - 入力
      - in
      - レコード
      - 任意
      - 
    * - 出力
      - out
      - レコード
      - 任意
      - 入出力の型に制約あり

..  attention::
    拡張演算子を利用する場合、変換前のレコードには変換後の型にある全てのプロパティが定義されている必要があります。
    つまり、この演算子は「プロパティを増やす」場合のみに利用できます。

射影演算子
----------
レコードから不要なプロパティを除去した別の型に変換する演算子です。
計算のために一時的に導入していたプロパティなどを除去したり、出力前に適切な型に変換することを想定としています。

..  list-table:: 射影演算子の概要
    :widths: 4 6
    :header-rows: 1

    * - 項目
      - 説明
    * - 分類
      - コア
    * - 導入
      - 0.2
    * - メソッド
      - ``project``
    * - 性能特性
      - Map
    * - 入力数
      - 1
    * - 出力数
      - 1

..  list-table:: 射影演算子の入出力
    :widths: 2 2 2 2 8
    :header-rows: 1

    * - 分類
      - 名前
      - 単位
      - 型
      - 備考
    * - 入力
      - in
      - レコード
      - 任意
      - 
    * - 出力
      - out
      - レコード
      - 任意
      - 入出力の型に制約あり

..  attention::
    射影演算子を利用する場合、変換後の型には変換前のレコードにある全てのプロパティが定義されている必要があります。
    つまり、この演算子は「プロパティを減らす」場合のみに利用できます。

結合演算子
==========
結合系の演算子は、複数のレコードを突き合わせたり結合したりするための演算子です。

マスタ確認演算子
----------------
レコードと同様のキーを持つレコードを別の入力から探し、存在する場合としない場合で出力を振り分ける演算子です。

..  list-table:: マスタ確認演算子の概要
    :widths: 4 6
    :header-rows: 1

    * - 項目
      - 説明
    * - 分類
      - ユーザー
    * - 導入
      - 0.1
    * - 演算子注釈
      - ``MasterCheck``
    * - 本体の実装
      - 不要
    * - 性能特性
      - Reduce [#]_
    * - 入力数
      - 2
    * - 出力数
      - 2
    * - 値引数
      - 指定不可
    * - 型引数
      - 指定可能
    * - 備考
      - マスタ選択を利用可能

..  list-table:: マスタ確認演算子の入出力
    :widths: 2 2 2 2 8
    :header-rows: 1

    * - 分類
      - 名前
      - 単位
      - 型
      - 備考
    * - 入力
      - master
      - グループ
      - 任意
      - グループ化を指定
    * - 入力
      - tx
      - レコード
      - 任意
      - グループ化を指定
    * - 出力
      - found
      - レコード
      - txと同様
      - マスタが見つかったもの
    * - 出力
      - missed
      - レコード
      - txと同様
      - マスタが見つからなかったもの

..  [#] 最適化によりMapになる場合もあります

マスタ結合演算子
----------------
レコードと同様のキーを持つレコードを別の入力から探し、それらを結合したレコードを出力する演算子です。
この演算子は、結合モデル [#]_ のレコードを構築します。入力はそれぞれ結合モデルの元になったデータモデルを指定し、結合に成功した場合に結合モデルが出力され、失敗した場合には元になったレコードが出力されます。
また、結合条件や結合方法は結合モデルに指定したものを利用します。

..  list-table:: マスタ結合演算子の概要
    :widths: 4 6
    :header-rows: 1

    * - 項目
      - 説明
    * - 分類
      - ユーザー
    * - 導入
      - 0.1
    * - 演算子注釈
      - ``MasterJoin``
    * - 本体の実装
      - 不要
    * - 性能特性
      - Reduce [#]_
    * - 入力数
      - 2
    * - 出力数
      - 2
    * - 値引数
      - 指定不可
    * - 型引数
      - 指定不可
    * - 備考
      - マスタ選択を利用可能

..  list-table:: マスタ結合演算子の入出力
    :widths: 2 2 2 2 8
    :header-rows: 1

    * - 分類
      - 名前
      - 単位
      - 型
      - 備考
    * - 入力
      - master
      - グループ
      - 任意
      - 
    * - 入力
      - tx
      - レコード
      - 任意
      - 
    * - 出力
      - joined
      - レコード
      - 任意
      - 結合結果、結合モデルを指定
    * - 出力
      - missed
      - レコード
      - txと同様
      - マスタが見つからなかったもの

..  [#] 最適化によりMapになる場合もあります
..  [#] :doc:`../dmdl/user-guide_ja`

マスタつき更新演算子
--------------------
レコードと同様のキーを持つレコードを別の入力から探し、両方の情報を元に片方のレコードの内容を更新する演算子です。

..  list-table:: マスタつき更新演算子の概要
    :widths: 4 6
    :header-rows: 1

    * - 項目
      - 説明
    * - 分類
      - ユーザー
    * - 導入
      - 0.1
    * - 演算子注釈
      - ``MasterJoinUpdate``
    * - 本体の実装
      - 必要
    * - 性能特性
      - Reduce [#]_
    * - 入力数
      - 2
    * - 出力数
      - 2
    * - 値引数
      - 指定可能
    * - 型引数
      - 指定可能
    * - 備考
      - マスタ選択を利用可能

..  list-table:: マスタつき更新演算子の入出力
    :widths: 2 2 2 2 8
    :header-rows: 1

    * - 分類
      - 名前
      - 単位
      - 型
      - 備考
    * - 入力
      - master
      - グループ
      - 任意
      - グループ化を指定
    * - 入力
      - tx
      - レコード
      - 任意
      - グループ化を指定
    * - 出力
      - found
      - レコード
      - txと同様
      - マスタが見つかったもの
    * - 出力
      - missed
      - レコード
      - txと同様
      - マスタが見つからなかったもの

..  [#] 最適化によりMapになる場合もあります

グループ結合演算子
------------------
複数の入力をキーでグループ化し、キーが一致する入力ごとのグループをまとめて操作する演算子です。
非常に複雑な操作を表現できますが、コンパイラの最適化を適用しにくかったり、グループごとの大きさに制限があるなどの問題もあります。

..  list-table:: グループ結合演算子の概要
    :widths: 4 6
    :header-rows: 1

    * - 項目
      - 説明
    * - 分類
      - ユーザー
    * - 導入
      - 0.1
    * - 演算子注釈
      - ``CoGroup``
    * - 本体の実装
      - 必要
    * - 性能特性
      - Reduce
    * - 入力数
      - 任意
    * - 出力数
      - 任意
    * - 値引数
      - 指定可能
    * - 型引数
      - 指定可能
    * - 備考
      - 

..  list-table:: グループ結合演算子の入出力
    :widths: 2 2 2 2 8
    :header-rows: 1

    * - 分類
      - 名前
      - 単位
      - 型
      - 備考
    * - 入力
      - (任意)
      - グループ
      - 任意
      - 任意の個数、グループ化を指定
    * - 出力
      - (任意)
      - レコード
      - 任意
      - 任意の個数

分割演算子
----------
結合モデルから結合元のレコードを抽出してそれぞれ出力する演算子です。
この演算子への入力は、結合モデルである必要があります。

..  list-table:: 分割演算子の概要
    :widths: 4 6
    :header-rows: 1

    * - 項目
      - 説明
    * - 分類
      - ユーザー
    * - 導入
      - 0.1
    * - 演算子注釈
      - ``Split``
    * - 本体の実装
      - 不要
    * - 性能特性
      - Map
    * - 入力数
      - 1
    * - 出力数
      - 2
    * - 値引数
      - 指定不可
    * - 型引数
      - 指定不可
    * - 備考
      - 

..  list-table:: 分割演算子の入出力
    :widths: 2 2 2 2 8
    :header-rows: 1

    * - 分類
      - 名前
      - 単位
      - 型
      - 備考
    * - 入力
      - in
      - レコード
      - 任意
      - 結合モデルのみ
    * - 出力
      - left
      - レコード
      - 特殊
      - 結合モデルの左項の型
    * - 出力
      - right
      - レコード
      - 特殊
      - 結合モデルの右項の型

集計演算子
==========
集計系の演算子は、主にグループ化したレコード内での計算を行うための演算子です。

単純集計演算子
--------------
レコードをキーでグループ化し、グループ内で集計した結果を出力する演算子です。
この演算子は、集計モデル [#]_ のレコードを構築します。入力は集計モデルの元になったデータモデルを指定し、集計結果の集計モデルが出力されます。
また、グループ化条件や集計方法は集計モデルに指定したものを利用します。

..  list-table:: 単純集計演算子の概要
    :widths: 4 6
    :header-rows: 1

    * - 項目
      - 説明
    * - 分類
      - ユーザー
    * - 導入
      - 0.1
    * - 演算子注釈
      - ``Summarize``
    * - 本体の実装
      - 不要
    * - 性能特性
      - Reduce
    * - 入力数
      - 1
    * - 出力数
      - 1
    * - 値引数
      - 指定不可
    * - 型引数
      - 指定不可
    * - 備考
      - 

..  list-table:: 単純集計演算子の入出力
    :widths: 2 2 2 2 8
    :header-rows: 1

    * - 分類
      - 名前
      - 単位
      - 型
      - 備考
    * - 入力
      - in
      - グループ
      - 任意
      - 集計モデルの元になった型
    * - 出力
      - summarized
      - レコード
      - 任意
      - 集計結果、集計モデルの型

..  [#] :doc:`../dmdl/user-guide_ja`

畳みこみ演算子
--------------
レコードをキーでグループ化し、グループ内のレコードを単一のレコードに畳み込む演算子です。
畳み込みの前後でレコードの型は一致していなければならず、また畳み込みの順序は規定されません。

..  list-table:: 畳みこみ演算子の概要
    :widths: 4 6
    :header-rows: 1

    * - 項目
      - 説明
    * - 分類
      - ユーザー
    * - 導入
      - 0.1
    * - 演算子注釈
      - ``Fold``
    * - 本体の実装
      - 必要
    * - 性能特性
      - Reduce
    * - 入力数
      - 1
    * - 出力数
      - 1
    * - 値引数
      - 指定可
    * - 型引数
      - 指定可
    * - 備考
      - 

..  list-table:: 畳みこみ演算子の入出力
    :widths: 2 2 2 2 8
    :header-rows: 1

    * - 分類
      - 名前
      - 単位
      - 型
      - 備考
    * - 入力
      - in
      - グループ
      - 任意
      - グループ化を指定
    * - 出力
      - out
      - レコード
      - inと同様
      - 畳みこみ結果

グループ整列演算子
------------------
レコードをキーでグループ化し、さらにグループを特定の条件で整列させて操作する演算子です。
この演算子は、 `グループ結合演算子`_ を単一の入力に対して行うものです。

..  list-table:: グループ整列演算子の概要
    :widths: 4 6
    :header-rows: 1

    * - 項目
      - 説明
    * - 分類
      - ユーザー
    * - 導入
      - 0.1
    * - 演算子注釈
      - ``GroupSort``
    * - 本体の実装
      - 必要
    * - 性能特性
      - Reduce
    * - 入力数
      - 1
    * - 出力数
      - 任意
    * - 値引数
      - 指定可
    * - 型引数
      - 指定可
    * - 備考
      - 

..  list-table:: グループ整列演算子の入出力
    :widths: 2 2 2 2 8
    :header-rows: 1

    * - 分類
      - 名前
      - 単位
      - 型
      - 備考
    * - 入力
      - in
      - グループ
      - 任意
      - グループ化を指定
    * - 出力
      - (任意)
      - レコード
      - 任意
      - 任意個数を指定可

特殊演算子
==========
特殊系の演算子は、ここまでに紹介した分類に属さない特殊な演算子です。

フロー演算子
------------
Flow DSLで定義したフロー部品を演算子として利用します。
この演算子の入出力は、元となったフロー部品の入出力と一致します。

..  list-table:: フロー演算子の概要
    :widths: 4 6
    :header-rows: 1

    * - 項目
      - 説明
    * - 分類
      - 特殊
    * - 導入
      - 0.1
    * - 入力数
      - 任意
    * - 出力数
      - 任意
    * - 値引数
      - 指定可
    * - 型引数
      - 指定可
    * - 備考
      - 

チェックポイント演算子
----------------------
処理の途中結果を保存し、タスクに失敗した際の再開位置を設定する演算子です。

..  attention::
    チェックポイント演算子は、ジョブフローのトランザクションとは無関係です。
    この演算子はシステムの一時的な不具合に対し、再試行のポイントを設定するためのものです。
    通常は明示的に指定する必要はありません。

..  list-table:: チェックポイント演算子の概要
    :widths: 4 6
    :header-rows: 1

    * - 項目
      - 説明
    * - 分類
      - コア
    * - 導入
      - 0.1
    * - メソッド
      - ``checkpoint``
    * - 性能特性
      - Map
    * - 入力数
      - 1
    * - 出力数
      - 1

..  list-table:: チェックポイント演算子の入出力
    :widths: 2 2 2 2 8
    :header-rows: 1

    * - 分類
      - 名前
      - 単位
      - 型
      - 備考
    * - 入力
      - in
      - レコード
      - 任意
      - 
    * - 出力
      - out
      - レコード
      - inと同様
      - 

..  note::
    現在の実装では、チェックポイント演算子の前後でMap Reduceジョブが区切られます。
    Map Reduceジョブの終わりでは、分散ファイルシステム上にジョブの結果が一時的に出力されます。
    そのため、チェックポイント以降にノードに不具合が発生した場合にも、
    チェックポイント以前の情報は多くの場合復旧可能です。

ロギング演算子
--------------
通過したデータごとにアプリケーションログを出力する演算子です。
ログには以下のレベルがあります。

..  list-table:: ログのレベル
    :widths: 4 10
    :header-rows: 1

    * - レベル
      - 概要
    * - ``ERROR``
      - 重大な不具合
    * - ``WARN``
      - 注意を要する不具合
    * - ``INFO``
      - 分析のための情報
    * - ``DEBUG``
      - デバッグのための情報

このうち、 ``DEBUG`` はコンパイラの設定で有効または無効を切り替えられます。

..  list-table:: ロギング演算子の概要
    :widths: 4 6
    :header-rows: 1

    * - 項目
      - 説明
    * - 分類
      - ユーザー
    * - 導入
      - 0.1
    * - 演算子注釈
      - ``Logging``
    * - 本体の実装
      - 必要
    * - 性能特性
      - Map
    * - 入力数
      - 1
    * - 出力数
      - 1
    * - 値引数
      - 指定可
    * - 型引数
      - 指定可
    * - 備考
      - 

..  list-table:: ロギング演算子の入出力
    :widths: 2 2 2 2 8
    :header-rows: 1

    * - 分類
      - 名前
      - 単位
      - 型
      - 備考
    * - 入力
      - in
      - レコード
      - 任意
      - 
    * - 出力
      - out
      - レコード
      - inと同様
      - 

空演算子
--------
「データを流さない入力」を表す演算子です。
`フロー演算子`_ の利用しない入力に接続することを想定しています。

..  list-table:: 空演算子の概要
    :widths: 4 6
    :header-rows: 1

    * - 項目
      - 説明
    * - 分類
      - コア
    * - 導入
      - 0.1
    * - メソッド
      - ``empty``
    * - 性能特性
      - N/A
    * - 入力数
      - 0
    * - 出力数
      - 1

..  list-table:: 空演算子の入出力
    :widths: 2 2 2 2 8
    :header-rows: 1

    * - 分類
      - 名前
      - 単位
      - 型
      - 備考
    * - 出力
      - out
      - レコード
      - 任意
      - 

停止演算子
----------
「データを流さない出力」を表す演算子です。
各種演算子の利用しない出力に接続することを想定しています。


..  list-table:: 停止演算子の概要
    :widths: 4 6
    :header-rows: 1

    * - 項目
      - 説明
    * - 分類
      - コア
    * - 導入
      - 0.1
    * - メソッド
      - ``stop``
    * - 性能特性
      - N/A
    * - 入力数
      - 1
    * - 出力数
      - 0

..  list-table:: 停止演算子の入出力
    :widths: 2 2 2 2 8
    :header-rows: 1

    * - 分類
      - 名前
      - 単位
      - 型
      - 備考
    * - 入力
      - in
      - レコード
      - 任意
      - 

..  note::
    Flow DSLではすべての演算子の出力が何らかに接続されていなければなりません。
    これは接続漏れなどによる実装バグなどを検出するための措置です。
