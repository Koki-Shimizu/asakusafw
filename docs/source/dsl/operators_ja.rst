==================
演算子リファレンス
==================

この文書では、Asakusa Frameworkが提供する演算子について個々に紹介します。

Asakusa DSLの演算子
===================
Asakusa FrameworkのOperator DSLとFlow DSLでは、それぞれ演算子を利用しています。

前者のOperator DSLでは、主に演算子を「作成」します。
Asakusa Frameworkが提供するのは演算子の「種類」であって、
それぞれの演算子の細かな挙動はOperator DSLでカスタマイズできます。

後者のFlow DSLでは、主に演算子を「複合」します。
Operator DSLで作成する演算子はデータフローの「部品」であり、
これらを複合して複雑なデータフローを構築することになります。

レコードとグループ
------------------
それぞれの演算子が処理するデータの単位は、「レコード」または「グループ」のいずれかです。

レコード
    データフローに流れるデータ1つ分。
    Asakusa DSLでは「データモデルオブジェクト」として表現される。

グループ
    レコードを特定のキーでグループ化したもの。
    Asakusa DSLでは、データモデルオブジェクトのリストや反復子などで表現される。

なお、Operator DSLでは上記のグループを作成するために、 ``Key`` [#]_ という注釈を多用します。
これは、グループ化のための方法や、グループ内での整列順序を指定するためのものです。

..  [#] ``com.asakusafw.vocabulary.model.Key``

演算子の分類
------------
それぞれの演算子は、処理の内容ごとにいくつかに分類できます。

`データフロー演算子`_
    データの流れそのものを制御する。

`データ操作演算子`_
    データフローに流れるデータを加工する。

`結合演算子`_
    複数のレコードを結合する。

`集計演算子`_
    レコードをグループごとに集計する。

`特殊演算子`_
    上記の分類に含まれない特別な演算子。

コア演算子とユーザー演算子
--------------------------
演算子を実装方法の面から2種類に分類できます。

コア演算子
    Asakusa Frameworkが **APIとして** 提供する演算子。
    この種類の演算子はOperator DSLで記述する必要はなく、Flow DSLから直接利用できる。

ユーザー演算子
    演算子の種類ごとに演算子注釈のみを提供している演算子。
    この種類の演算子を利用するには、Operator DSLで必要な演算子メソッドを定義する必要がある。

Flow DSLでコア演算子を利用する場合、
一般的に ``CoreOperatorFactory`` [#]_ というファクトリクラスが提供するメソッドを使用します。

..  [#] ``com.asakusafw.vocabulary.flow.util.CoreOperatorFactory``

演算子の性能特性
----------------
いくつかの演算子は、Map Reduceプログラムに変換する際に
「Reduceの先頭に強制的に配置される」という特性を持っています (Reduce系演算子)。
このようなReduce系演算子を多用した場合、
生成されるアプリケーションのMap Reduceの段数が増えるため、
性能に多大な影響を及ぼす場合があります。

複数のレコードや、グループを入力に取る演算子は、基本的にReduce系の演算子です。
そうでなく、単一のレコードを入力に取る演算子は、Map Reduceアプリケーションの
任意の位置に配置され、Reduce系演算子に比べて性能与える影響が小さくなります (Map系演算子)。

なお、Reduce系演算子の中には、コンパイラの最適化によって
Map系の演算子に変換される場合もあります。

データフロー演算子
==================
データフロー系の演算子は、主にデータフローの構造を制御するための演算子です。

分岐演算子
----------
レコードを入力にとって、レコードの内容に応じてそれぞれの出力にレコードを振り分ける演算子です。
「条件に応じて出力先を変える」などの用途に利用できます。

合流演算子
----------
複数の入力を合流して、単一の出力にまとめる演算子です。
`分岐演算子`_ の逆の動作を行い、SQLの ``UNION`` のように動きます。

複製演算子
----------
レコードを入力にとって、同じ内容のレコードを複数の出力にそれぞれ出力する演算子です。

データ操作演算子
================
データ操作系の演算子は、主にレコードを加工したり変形したりするための演算子です。

更新演算子
----------
レコードの内容を更新する演算子です。
レコードの型そのものを変更したい場合には、 `変換演算子`_ を利用します。

変換演算子
----------
レコードを別の型のレコードに変換する演算子です。
主に「レコードから別のレコードを作成する」という目的で利用します。

..  note::
    0.1.xではレコードから不要なプロパティを除去したり、
    新たなプロパティを追加する際にもこの変換演算子を利用していました。
    0.2.0以降、そのような単純な用途では `射影演算子`_ や `拡張演算子`_ の利用を推奨しています。


拡張演算子
----------
レコードに新たなプロパティを追加した別の型に変換する演算子です。
計算のために一時的にプロパティを追加したい場合などに利用することを想定しています。

..  attention::
    拡張演算子を利用する場合、変換前のレコードには変換後の型にある全てのプロパティが定義されている必要があります。
    つまり、この演算子は「プロパティを増やす」場合のみに利用できます。

射影演算子
----------
レコードから不要なプロパティを除去した別の型に変換する演算子です。
計算のために一時的に導入していたプロパティなどを除去したり、出力前に適切な型に変換することを想定としています。

..  attention::
    射影演算子を利用する場合、変換後の型には変換前のレコードにある全てのプロパティが定義されている必要があります。
    つまり、この演算子は「プロパティを減らす」場合のみに利用できます。

結合演算子
==========
結合系の演算子は、複数のレコードを突き合わせたり結合したりするための演算子です。

マスタ確認演算子
----------------

マスタ結合演算子
----------------

マスタつき更新演算子
--------------------

グループ結合演算子
------------------

分割演算子
----------

集計演算子
==========

単純集計演算子
--------------

畳みこみ演算子
--------------

グループ整列演算子
------------------

特殊演算子
==========

フロー部品
----------

チェックポイント演算子
----------------------

ロギング演算子
--------------

空演算子
--------

停止演算子
----------

